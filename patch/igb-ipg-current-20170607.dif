Index: sys/dev/e1000/if_igb.c
===================================================================
--- sys/dev/e1000/if_igb.c	(revision 303182)
+++ sys/dev/e1000/if_igb.c	(working copy)
@@ -217,16 +217,17 @@
 static void	igb_handle_link(void *context, int pending);
 static void	igb_handle_link_locked(struct adapter *);
 
 static void	igb_set_sysctl_value(struct adapter *, const char *,
 		    const char *, int *, int);
 static int	igb_set_flowcntl(SYSCTL_HANDLER_ARGS);
 static int	igb_sysctl_dmac(SYSCTL_HANDLER_ARGS);
 static int	igb_sysctl_eee(SYSCTL_HANDLER_ARGS);
+static int	igb_sysctl_tipg(SYSCTL_HANDLER_ARGS);
 
 #ifdef DEVICE_POLLING
 static poll_handler_t igb_poll;
 #endif /* POLLING */
 
 /*********************************************************************
  *  FreeBSD Device Interface Entry Points
  *********************************************************************/
@@ -552,16 +553,22 @@
 		if (adapter->hw.phy.media_type == e1000_media_type_copper) {
 			if (adapter->hw.mac.type == e1000_i354)
 				e1000_set_eee_i354(&adapter->hw, TRUE, TRUE);
 			else
 				e1000_set_eee_i350(&adapter->hw, TRUE, TRUE);
 		}
 	}
 
+	SYSCTL_ADD_PROC(device_get_sysctl_ctx(dev),
+	    SYSCTL_CHILDREN(device_get_sysctl_tree(dev)),
+	    OID_AUTO, "tipg", CTLTYPE_INT|CTLFLAG_RW,
+	    adapter, 0, igb_sysctl_tipg, "I",
+	    "Transmit IPG register");
+
 	/*
 	** Start from a known state, this is
 	** important in reading the nvm and
 	** mac from that.
 	*/
 	e1000_reset_hw(&adapter->hw);
 
 	/* Make sure we have a good EEPROM before we read from it */
@@ -6434,8 +6441,28 @@
 	if (error || req->newptr == NULL)
 		return (error);
 	IGB_CORE_LOCK(adapter);
 	adapter->hw.dev_spec._82575.eee_disable = (value != 0);
 	igb_init_locked(adapter);
 	IGB_CORE_UNLOCK(adapter);
 	return (0);
 }
+
+static int
+igb_sysctl_tipg(SYSCTL_HANDLER_ARGS)
+{
+	struct adapter *adapter = (struct adapter *)arg1;
+	int error, value;
+	u32 reg;
+
+	value = E1000_READ_REG(&adapter->hw, E1000_TIPG) & E1000_TIPG_IPGT_MASK;
+	error = sysctl_handle_int(oidp, &value, 0, req);
+	if (error || req->newptr == NULL)
+		return (error);
+
+	reg = E1000_READ_REG(&adapter->hw, E1000_TIPG);
+	reg &= ~E1000_TIPG_IPGT_MASK;
+	reg |= value & E1000_TIPG_IPGT_MASK;
+	E1000_WRITE_REG(&adapter->hw, E1000_TIPG, reg);
+
+	return (0);
+}
